find.package("devtools")
install.packages("devtools")
library(devtools)
find.package("devtools")
library(devtools)
find_rtools()
library(datasets)
data(iris)
&iris
?iris
iris
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[,1:4],2,mean)
rowMeans(iris[,1:4])
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(tapply(mtcars$hp, mtcars$cyl, mean))
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x[1]
abs(x[3]-x[1])
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind (c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
exit
library(XML)
library()
```
library("bitops", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library("bitops", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
render(PA_Template2.Rmd)
getwd()
setwd("C:/Users/Sandeep/Documents/DataScientist_Coursera/Reproducible Research/Project/RepData_PeerAssessment2")
getwd()
setwd("C:/users/Sandeep/Documents/DataScientist_Coursera//Reproducible Reasearch/Project//RepData_PeerAssessment2")
getwd()
render(PA_Template2.Rmd)
render("PA_Template2.Rmd")
render("PA_Template2.Rmd")
render("PA_Template2.Rmd")
render("PA_Template2.Rmd","pdf_document")
pdflatex -v
install.packages("ROracle", type="source")
## Comments start with #
x <- 5
x
x <- 1:20
x
x < c(0.5, 0.8)
x
x <- c(TRUE, FALSE)
x
x <- c(T, F)
x
x <- c("a","b","c")
x
x <- 9:25
x
x < c(0.5, 0.8)
x
x <- c(0.5, 0.8)
x
x <- c(TRUE, FALSE)
x
x <- c(T, F)
x
x <- c("a","b","c")
x
x <- 9:25
x
y <- c(1.7, "a")
y
y <- c(5, TRUE)
y
y <- c(TRUE, "c")
y
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
m <- matrix(nrow=3, ncol=2)
m
dim(m)
attribute(m)
dim(m)
attributes(m)
m <- matrix(1:6, nrow=2, ncol=3)
m
m <- 1:10
m
dim(m) <- c(2,5)
m
x<- 1:3
y <- 10:12
cbind(x,y)
rbind(x, y)
x <- c(3.4, "a", TRUE, 1 + 5i)
x
x <- list(3.4, "a", TRUE, 1 + 5i)
x
x <- data.frame(foo=1:4, bar=c(T,F,T,F))
x
nrow(x)
ncol(x)
x <- c("a","b","c","c","d","a")
x[1]
x[2]
x[1:4]
x[x > "a"]
u <- x > "a"
u
x[u]
x <- c(1, 2, NA, 4, NA, 5)
y <- c("a", "b", NA, "d", NA, "f")
good <- complete.cases(x, y)
good
x[good]
y[good]
x[!good]
require(ggplot2)
plots = lapply(1:5, function(.x) qplot(1:10,rnorm(10), main=paste("plot",.x)))
require(gridExtra)
do.call(grid.arrange, plots)
require(lattice)
grid.arrange(qplot(1:10), xyplot(1:10~1:10),
tableGrob(head(iris)), nrow=2, as.table=TRUE, main="test main",
sub=textGrob("test sub", gp=gpar(font=2)))
install.packages("gridExtra")
require(ggplot2)
plots = lapply(1:5, function(.x) qplot(1:10,rnorm(10), main=paste("plot",.x)))
require(gridExtra)
do.call(grid.arrange, plots)
require(lattice)
grid.arrange(qplot(1:10), xyplot(1:10~1:10),
tableGrob(head(iris)), nrow=2, as.table=TRUE, main="test main",
sub=textGrob("test sub", gp=gpar(font=2)))
justify <- function(x, hjust="center", vjust="center"){
w <- grobWidth(x)
h <- grobHeight(x)
xj <- switch(hjust,
center = 0.5,
left = 0.5*w,
right=unit(1,"npc") - 0.5*w)
yj <- switch(vjust,
center = 0.5,
bottom = 0.5*h,
top=unit(1,"npc") - 0.5*h)
x$vp <- viewport(x=xj, y=yj)
grid.draw(x)
}
g <- tableGrob(iris[1:3,1:2])
grid.newpage()
justify(g,"left", "top")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit.origin <- lm( y ~ x - 1 )
summary(fit.origin)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m.x <- mean(x)
sd.x <- sd(x)
(x[1] - m.x)/sd.x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( y ~ x )
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
B1=0.51/0.5
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
sqe <- e*e
res.var <- sum(sqe) / (length(e) - 2)
sqrt(res.var)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp - 2 * 0.5591
?mtcars
summary(fit)
fit[[1]][1] + 3 * fit[[1]][2]
summary(fit)
2 * (fit$coefficients[2] - 2 * 0.5591)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit3)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
lm.influence(fit)$hat
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
lm.influence(fit)$hat
dfbetas(fit)
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp('C:/temp/WrdCl')
shiny::runApp()
shiny::runApp()
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("data.table")
